/*
 * AUSF API
 *
 * AUSF UE Authentication Service. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 * Generated by: https://openapi-generator.tech
 */

/// ProSeAuthenticationCtx : Contains the information related to the resource generated to handle the ProSe authentication.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ProSeAuthenticationCtx {
    #[serde(rename = "authType")]
    pub auth_type: crate::models::AuthType,
    /// A map(list of key-value pairs) where member serves as key
    #[serde(rename = "_links")]
    pub _links: ::std::collections::HashMap<String, crate::models::LinksValueSchema>,
    #[serde(rename = "proSeAuthData")]
    pub pro_se_auth_data: Box<crate::models::ProSeAuthData>,
    /// A string used to indicate the features supported by an API that is used as defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\", \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported. 
    #[serde(rename = "supportedFeatures", skip_serializing_if = "Option::is_none")]
    pub supported_features: Option<String>,
}

impl ProSeAuthenticationCtx {
    /// Contains the information related to the resource generated to handle the ProSe authentication.
    pub fn new(auth_type: crate::models::AuthType, _links: ::std::collections::HashMap<String, crate::models::LinksValueSchema>, pro_se_auth_data: crate::models::ProSeAuthData) -> ProSeAuthenticationCtx {
        ProSeAuthenticationCtx {
            auth_type,
            _links,
            pro_se_auth_data: Box::new(pro_se_auth_data),
            supported_features: None,
        }
    }
}


