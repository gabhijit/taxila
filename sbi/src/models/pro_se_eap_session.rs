/*
 * AUSF API
 *
 * AUSF UE Authentication Service. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 * Generated by: https://openapi-generator.tech
 */

/// ProSeEapSession : Contains information related to the EAP session. If present the 5gPrukId IE shall carry the CP-PRUK ID.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ProSeEapSession {
    /// contains an EAP packet
    #[serde(rename = "eapPayload", deserialize_with = "Option::deserialize")]
    pub eap_payload: Option<String>,
    /// Contains the KNR_ProSe.
    #[serde(rename = "knrProSe", skip_serializing_if = "Option::is_none")]
    pub knr_pro_se: Option<String>,
    /// A map(list of key-value pairs) where member serves as key
    #[serde(rename = "_links", skip_serializing_if = "Option::is_none")]
    pub _links: Option<::std::collections::HashMap<String, crate::models::LinksValueSchema>>,
    #[serde(rename = "authResult", skip_serializing_if = "Option::is_none")]
    pub auth_result: Option<crate::models::AuthResult>,
    /// A string used to indicate the features supported by an API that is used as defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\", \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported. 
    #[serde(rename = "supportedFeatures", skip_serializing_if = "Option::is_none")]
    pub supported_features: Option<String>,
    /// contains an Nonce2
    #[serde(rename = "nonce2", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub nonce2: Option<Option<String>>,
    /// A string carrying the CP-PRUK ID of the remote UE. The CP-PRUK ID is a string in NAI format as specified in clause 28.7.11 of 3GPP TS 23.003. 
    #[serde(rename = "5gPrukId", skip_serializing_if = "Option::is_none")]
    pub param_5g_pruk_id: Option<String>,
}

impl ProSeEapSession {
    /// Contains information related to the EAP session. If present the 5gPrukId IE shall carry the CP-PRUK ID.
    pub fn new(eap_payload: Option<String>) -> ProSeEapSession {
        ProSeEapSession {
            eap_payload,
            knr_pro_se: None,
            _links: None,
            auth_result: None,
            supported_features: None,
            nonce2: None,
            param_5g_pruk_id: None,
        }
    }
}


