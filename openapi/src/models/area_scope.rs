/*
 * Common Data Types
 *
 * Common Data Types for Service Based Interfaces. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// AreaScope : Contain the area based on Cells or Tracking Areas.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct AreaScope {
    #[serde(rename = "eutraCellIdList", skip_serializing_if = "Option::is_none")]
    pub eutra_cell_id_list: Option<Vec<String>>,
    #[serde(rename = "nrCellIdList", skip_serializing_if = "Option::is_none")]
    pub nr_cell_id_list: Option<Vec<String>>,
    #[serde(rename = "tacList", skip_serializing_if = "Option::is_none")]
    pub tac_list: Option<Vec<String>>,
    /// A map (list of key-value pairs) where PlmnId converted to a string serves as key 
    #[serde(rename = "tacInfoPerPlmn", skip_serializing_if = "Option::is_none")]
    pub tac_info_per_plmn: Option<::std::collections::HashMap<String, crate::models::TacInfo>>,
}

impl AreaScope {
    /// Contain the area based on Cells or Tracking Areas.
    pub fn new() -> AreaScope {
        AreaScope {
            eutra_cell_id_list: None,
            nr_cell_id_list: None,
            tac_list: None,
            tac_info_per_plmn: None,
        }
    }
}


