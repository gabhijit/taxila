/*
 * Common Data Types
 *
 * Common Data Types for Service Based Interfaces. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// HalTemplate : Hypertext Application Language (HAL) template contains the extended 3GPP hypermedia format. 



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct HalTemplate {
    /// A human-readable string that can be used to identify this template
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "method")]
    pub method: crate::models::HttpMethod,
    /// The media type that should be used for the corresponding request. If the attribute is missing, or contains an unrecognized value, the client should act as if the contentType is set to \"application/json\". 
    #[serde(rename = "contentType", skip_serializing_if = "Option::is_none")]
    pub content_type: Option<String>,
    /// The properties that should be included in the body of the corresponding request. If the contentType attribute is set to \"application/json\", then this attribute describes the attributes of the JSON object of the body. 
    #[serde(rename = "properties", skip_serializing_if = "Option::is_none")]
    pub properties: Option<Vec<crate::models::Property>>,
}

impl HalTemplate {
    /// Hypertext Application Language (HAL) template contains the extended 3GPP hypermedia format. 
    pub fn new(method: crate::models::HttpMethod) -> HalTemplate {
        HalTemplate {
            title: None,
            method,
            content_type: None,
            properties: None,
        }
    }
}


