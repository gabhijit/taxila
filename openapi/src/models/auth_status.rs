/*
 * Common Data Types
 *
 * Common Data Types for Service Based Interfaces. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// AuthStatus : Possible values are: - \"EAP_SUCCESS\": The NSSAA status is EAP-Success. - \"EAP_FAILURE\": The NSSAA status is EAP-Failure. - \"PENDING\": The NSSAA status is Pending. 

/// Possible values are: - \"EAP_SUCCESS\": The NSSAA status is EAP-Success. - \"EAP_FAILURE\": The NSSAA status is EAP-Failure. - \"PENDING\": The NSSAA status is Pending. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AuthStatus {
    #[serde(rename = "EAP_SUCCESS")]
    EapSuccess,
    #[serde(rename = "EAP_FAILURE")]
    EapFailure,
    #[serde(rename = "PENDING")]
    Pending,

}

impl ToString for AuthStatus {
    fn to_string(&self) -> String {
        match self {
            Self::EapSuccess => String::from("EAP_SUCCESS"),
            Self::EapFailure => String::from("EAP_FAILURE"),
            Self::Pending => String::from("PENDING"),
        }
    }
}

impl Default for AuthStatus {
    fn default() -> AuthStatus {
        Self::EapSuccess
    }
}




