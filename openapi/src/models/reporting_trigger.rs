/*
 * Common Data Types
 *
 * Common Data Types for Service Based Interfaces. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// ReportingTrigger : The enumeration ReportingTrigger defines Reporting Triggers for MDT in the trace. See 3GPP TS 32.42] for further  description of the values. It shall comply with the provisions defined in table 5.6.3.8-1. 

/// The enumeration ReportingTrigger defines Reporting Triggers for MDT in the trace. See 3GPP TS 32.42] for further  description of the values. It shall comply with the provisions defined in table 5.6.3.8-1. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ReportingTrigger {
    #[serde(rename = "PERIODICAL")]
    Periodical,
    #[serde(rename = "EVENT_A2")]
    EventA2,
    #[serde(rename = "EVENT_A2_PERIODIC")]
    EventA2Periodic,
    #[serde(rename = "ALL_RRM_EVENT_TRIGGERS")]
    AllRrmEventTriggers,

}

impl ToString for ReportingTrigger {
    fn to_string(&self) -> String {
        match self {
            Self::Periodical => String::from("PERIODICAL"),
            Self::EventA2 => String::from("EVENT_A2"),
            Self::EventA2Periodic => String::from("EVENT_A2_PERIODIC"),
            Self::AllRrmEventTriggers => String::from("ALL_RRM_EVENT_TRIGGERS"),
        }
    }
}

impl Default for ReportingTrigger {
    fn default() -> ReportingTrigger {
        Self::Periodical
    }
}




