/*
 * Common Data Types
 *
 * Common Data Types for Service Based Interfaces. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// SscMode : represents the service and session continuity mode It shall comply with the provisions defined in table 5.4.3.6-1. 

/// represents the service and session continuity mode It shall comply with the provisions defined in table 5.4.3.6-1. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SscMode {
    #[serde(rename = "SSC_MODE_1")]
    Variant1,
    #[serde(rename = "SSC_MODE_2")]
    Variant2,
    #[serde(rename = "SSC_MODE_3")]
    Variant3,

}

impl ToString for SscMode {
    fn to_string(&self) -> String {
        match self {
            Self::Variant1 => String::from("SSC_MODE_1"),
            Self::Variant2 => String::from("SSC_MODE_2"),
            Self::Variant3 => String::from("SSC_MODE_3"),
        }
    }
}

impl Default for SscMode {
    fn default() -> SscMode {
        Self::Variant1
    }
}




