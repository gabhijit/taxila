/*
 * Common Data Types
 *
 * Common Data Types for Service Based Interfaces. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// NotificationFlag : Possible values are: - ACTIVATE: The event notification is activated. - DEACTIVATE: The event notification is deactivated and shall be muted. The available    event(s) shall be stored. - RETRIEVAL: The event notification shall be sent to the NF service consumer(s),   after that, is muted again. 

/// Possible values are: - ACTIVATE: The event notification is activated. - DEACTIVATE: The event notification is deactivated and shall be muted. The available    event(s) shall be stored. - RETRIEVAL: The event notification shall be sent to the NF service consumer(s),   after that, is muted again. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum NotificationFlag {
    #[serde(rename = "ACTIVATE")]
    Activate,
    #[serde(rename = "DEACTIVATE")]
    Deactivate,
    #[serde(rename = "RETRIEVAL")]
    Retrieval,

}

impl ToString for NotificationFlag {
    fn to_string(&self) -> String {
        match self {
            Self::Activate => String::from("ACTIVATE"),
            Self::Deactivate => String::from("DEACTIVATE"),
            Self::Retrieval => String::from("RETRIEVAL"),
        }
    }
}

impl Default for NotificationFlag {
    fn default() -> NotificationFlag {
        Self::Activate
    }
}




