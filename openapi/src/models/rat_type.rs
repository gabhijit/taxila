/*
 * Common Data Types
 *
 * Common Data Types for Service Based Interfaces. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// RatType : Indicates the radio access used.

/// Indicates the radio access used.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RatType {
    #[serde(rename = "NR")]
    Nr,
    #[serde(rename = "EUTRA")]
    Eutra,
    #[serde(rename = "WLAN")]
    Wlan,
    #[serde(rename = "VIRTUAL")]
    Virtual,
    #[serde(rename = "NBIOT")]
    Nbiot,
    #[serde(rename = "WIRELINE")]
    Wireline,
    #[serde(rename = "WIRELINE_CABLE")]
    WirelineCable,
    #[serde(rename = "WIRELINE_BBF")]
    WirelineBbf,
    #[serde(rename = "LTE-M")]
    LteM,
    #[serde(rename = "NR_U")]
    NrU,
    #[serde(rename = "EUTRA_U")]
    EutraU,
    #[serde(rename = "TRUSTED_N3GA")]
    TrustedN3Ga,
    #[serde(rename = "TRUSTED_WLAN")]
    TrustedWlan,
    #[serde(rename = "UTRA")]
    Utra,
    #[serde(rename = "GERA")]
    Gera,
    #[serde(rename = "NR_LEO")]
    NrLeo,
    #[serde(rename = "NR_MEO")]
    NrMeo,
    #[serde(rename = "NR_GEO")]
    NrGeo,
    #[serde(rename = "NR_OTHER_SAT")]
    NrOtherSat,
    #[serde(rename = "NR_REDCAP")]
    NrRedcap,

}

impl ToString for RatType {
    fn to_string(&self) -> String {
        match self {
            Self::Nr => String::from("NR"),
            Self::Eutra => String::from("EUTRA"),
            Self::Wlan => String::from("WLAN"),
            Self::Virtual => String::from("VIRTUAL"),
            Self::Nbiot => String::from("NBIOT"),
            Self::Wireline => String::from("WIRELINE"),
            Self::WirelineCable => String::from("WIRELINE_CABLE"),
            Self::WirelineBbf => String::from("WIRELINE_BBF"),
            Self::LteM => String::from("LTE-M"),
            Self::NrU => String::from("NR_U"),
            Self::EutraU => String::from("EUTRA_U"),
            Self::TrustedN3Ga => String::from("TRUSTED_N3GA"),
            Self::TrustedWlan => String::from("TRUSTED_WLAN"),
            Self::Utra => String::from("UTRA"),
            Self::Gera => String::from("GERA"),
            Self::NrLeo => String::from("NR_LEO"),
            Self::NrMeo => String::from("NR_MEO"),
            Self::NrGeo => String::from("NR_GEO"),
            Self::NrOtherSat => String::from("NR_OTHER_SAT"),
            Self::NrRedcap => String::from("NR_REDCAP"),
        }
    }
}

impl Default for RatType {
    fn default() -> RatType {
        Self::Nr
    }
}




