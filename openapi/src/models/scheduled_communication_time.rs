/*
 * Common Data Types
 *
 * Common Data Types for Service Based Interfaces. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// ScheduledCommunicationTime : Identifies time and day of the week when the UE is available for communication.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ScheduledCommunicationTime {
    /// Identifies the day(s) of the week. If absent, it indicates every day of the week. 
    #[serde(rename = "daysOfWeek", skip_serializing_if = "Option::is_none")]
    pub days_of_week: Option<Vec<i32>>,
    /// String with format partial-time or full-time as defined in clause 5.6 of IETF RFC 3339. Examples, 20:15:00, 20:15:00-08:00 (for 8 hours behind UTC). 
    #[serde(rename = "timeOfDayStart", skip_serializing_if = "Option::is_none")]
    pub time_of_day_start: Option<String>,
    /// String with format partial-time or full-time as defined in clause 5.6 of IETF RFC 3339. Examples, 20:15:00, 20:15:00-08:00 (for 8 hours behind UTC). 
    #[serde(rename = "timeOfDayEnd", skip_serializing_if = "Option::is_none")]
    pub time_of_day_end: Option<String>,
}

impl ScheduledCommunicationTime {
    /// Identifies time and day of the week when the UE is available for communication.
    pub fn new() -> ScheduledCommunicationTime {
        ScheduledCommunicationTime {
            days_of_week: None,
            time_of_day_start: None,
            time_of_day_end: None,
        }
    }
}


