/*
 * Common Data Types
 *
 * Common Data Types for Service Based Interfaces. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// MdtConfiguration : contains contain MDT configuration data.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct MdtConfiguration {
    #[serde(rename = "jobType")]
    pub job_type: crate::models::JobType,
    #[serde(rename = "reportType", skip_serializing_if = "Option::is_none")]
    pub report_type: Option<crate::models::ReportTypeMdt>,
    #[serde(rename = "areaScope", skip_serializing_if = "Option::is_none")]
    pub area_scope: Option<Box<crate::models::AreaScope>>,
    #[serde(rename = "measurementLteList", skip_serializing_if = "Option::is_none")]
    pub measurement_lte_list: Option<Vec<crate::models::MeasurementLteForMdt>>,
    #[serde(rename = "measurementNrList", skip_serializing_if = "Option::is_none")]
    pub measurement_nr_list: Option<Vec<crate::models::MeasurementNrForMdt>>,
    #[serde(rename = "sensorMeasurementList", skip_serializing_if = "Option::is_none")]
    pub sensor_measurement_list: Option<Vec<crate::models::SensorMeasurement>>,
    #[serde(rename = "reportingTriggerList", skip_serializing_if = "Option::is_none")]
    pub reporting_trigger_list: Option<Vec<crate::models::ReportingTrigger>>,
    #[serde(rename = "reportInterval", skip_serializing_if = "Option::is_none")]
    pub report_interval: Option<crate::models::ReportIntervalMdt>,
    #[serde(rename = "reportIntervalNr", skip_serializing_if = "Option::is_none")]
    pub report_interval_nr: Option<crate::models::ReportIntervalNrMdt>,
    #[serde(rename = "reportAmount", skip_serializing_if = "Option::is_none")]
    pub report_amount: Option<crate::models::ReportAmountMdt>,
    /// This IE shall be present if the report trigger parameter is configured for A2 event reporting or A2 event triggered periodic reporting and the job type parameter is configured for Immediate MDT or combined Immediate MDT and Trace in LTE. When present, this IE shall indicate the Event Threshold for RSRP, and the value shall be between 0-97. 
    #[serde(rename = "eventThresholdRsrp", skip_serializing_if = "Option::is_none")]
    pub event_threshold_rsrp: Option<i32>,
    /// This IE shall be present if the report trigger parameter is configured for A2 event reporting or A2 event triggered periodic reporting and the job type parameter is configured for Immediate MDT or combined Immediate MDT and Trace in NR. When present, this IE shall indicate the Event Threshold for RSRP, and the value shall be between 0-127. 
    #[serde(rename = "eventThresholdRsrpNr", skip_serializing_if = "Option::is_none")]
    pub event_threshold_rsrp_nr: Option<i32>,
    /// This IE shall be present if the report trigger parameter is configured for A2 event reporting or A2 event triggered periodic reporting and the job type parameter is configured for Immediate MDT or combined Immediate MDT and Trace in LTE.When present, this IE shall indicate the Event Threshold for RSRQ, and the value shall be between 0-34. 
    #[serde(rename = "eventThresholdRsrq", skip_serializing_if = "Option::is_none")]
    pub event_threshold_rsrq: Option<i32>,
    /// This IE shall be present if the report trigger parameter is configured for A2 event reporting or A2 event triggered periodic reporting and the job type parameter is configured for Immediate MDT or combined Immediate MDT and Trace in NR.When present, this IE shall indicate the Event Threshold for RSRQ, and the value shall be between 0-127. 
    #[serde(rename = "eventThresholdRsrqNr", skip_serializing_if = "Option::is_none")]
    pub event_threshold_rsrq_nr: Option<i32>,
    #[serde(rename = "eventList", skip_serializing_if = "Option::is_none")]
    pub event_list: Option<Vec<crate::models::EventForMdt>>,
    #[serde(rename = "loggingInterval", skip_serializing_if = "Option::is_none")]
    pub logging_interval: Option<crate::models::LoggingIntervalMdt>,
    #[serde(rename = "loggingIntervalNr", skip_serializing_if = "Option::is_none")]
    pub logging_interval_nr: Option<crate::models::LoggingIntervalNrMdt>,
    #[serde(rename = "loggingDuration", skip_serializing_if = "Option::is_none")]
    pub logging_duration: Option<crate::models::LoggingDurationMdt>,
    #[serde(rename = "loggingDurationNr", skip_serializing_if = "Option::is_none")]
    pub logging_duration_nr: Option<crate::models::LoggingDurationNrMdt>,
    #[serde(rename = "positioningMethod", skip_serializing_if = "Option::is_none")]
    pub positioning_method: Option<crate::models::PositioningMethodMdt>,
    #[serde(rename = "addPositioningMethodList", skip_serializing_if = "Option::is_none")]
    pub add_positioning_method_list: Option<Vec<crate::models::PositioningMethodMdt>>,
    #[serde(rename = "collectionPeriodRmmLte", skip_serializing_if = "Option::is_none")]
    pub collection_period_rmm_lte: Option<crate::models::CollectionPeriodRmmLteMdt>,
    #[serde(rename = "collectionPeriodRmmNr", skip_serializing_if = "Option::is_none")]
    pub collection_period_rmm_nr: Option<crate::models::CollectionPeriodRmmNrMdt>,
    #[serde(rename = "measurementPeriodLte", skip_serializing_if = "Option::is_none")]
    pub measurement_period_lte: Option<crate::models::MeasurementPeriodLteMdt>,
    #[serde(rename = "mdtAllowedPlmnIdList", skip_serializing_if = "Option::is_none")]
    pub mdt_allowed_plmn_id_list: Option<Vec<crate::models::PlmnId>>,
    #[serde(rename = "mbsfnAreaList", skip_serializing_if = "Option::is_none")]
    pub mbsfn_area_list: Option<Vec<crate::models::MbsfnArea>>,
    #[serde(rename = "interFreqTargetList", skip_serializing_if = "Option::is_none")]
    pub inter_freq_target_list: Option<Vec<crate::models::InterFreqTargetInfo>>,
}

impl MdtConfiguration {
    /// contains contain MDT configuration data.
    pub fn new(job_type: crate::models::JobType) -> MdtConfiguration {
        MdtConfiguration {
            job_type,
            report_type: None,
            area_scope: None,
            measurement_lte_list: None,
            measurement_nr_list: None,
            sensor_measurement_list: None,
            reporting_trigger_list: None,
            report_interval: None,
            report_interval_nr: None,
            report_amount: None,
            event_threshold_rsrp: None,
            event_threshold_rsrp_nr: None,
            event_threshold_rsrq: None,
            event_threshold_rsrq_nr: None,
            event_list: None,
            logging_interval: None,
            logging_interval_nr: None,
            logging_duration: None,
            logging_duration_nr: None,
            positioning_method: None,
            add_positioning_method_list: None,
            collection_period_rmm_lte: None,
            collection_period_rmm_nr: None,
            measurement_period_lte: None,
            mdt_allowed_plmn_id_list: None,
            mbsfn_area_list: None,
            inter_freq_target_list: None,
        }
    }
}


