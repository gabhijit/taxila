/*
 * Common Data Types
 *
 * Common Data Types for Service Based Interfaces. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 * Generated by: https://openapi-generator.tech
 */


/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum NfTypeAnyOf {
    #[serde(rename = "NRF")]
    Nrf,
    #[serde(rename = "UDM")]
    Udm,
    #[serde(rename = "AMF")]
    Amf,
    #[serde(rename = "SMF")]
    Smf,
    #[serde(rename = "AUSF")]
    Ausf,
    #[serde(rename = "NEF")]
    Nef,
    #[serde(rename = "PCF")]
    Pcf,
    #[serde(rename = "SMSF")]
    Smsf,
    #[serde(rename = "NSSF")]
    Nssf,
    #[serde(rename = "UDR")]
    Udr,
    #[serde(rename = "LMF")]
    Lmf,
    #[serde(rename = "GMLC")]
    Gmlc,
    #[serde(rename = "5G_EIR")]
    Variant5GEir,
    #[serde(rename = "SEPP")]
    Sepp,
    #[serde(rename = "UPF")]
    Upf,
    #[serde(rename = "N3IWF")]
    N3Iwf,
    #[serde(rename = "AF")]
    Af,
    #[serde(rename = "UDSF")]
    Udsf,
    #[serde(rename = "BSF")]
    Bsf,
    #[serde(rename = "CHF")]
    Chf,
    #[serde(rename = "NWDAF")]
    Nwdaf,
    #[serde(rename = "PCSCF")]
    Pcscf,
    #[serde(rename = "CBCF")]
    Cbcf,
    #[serde(rename = "HSS")]
    Hss,
    #[serde(rename = "UCMF")]
    Ucmf,
    #[serde(rename = "SOR_AF")]
    SorAf,
    #[serde(rename = "SPAF")]
    Spaf,
    #[serde(rename = "MME")]
    Mme,
    #[serde(rename = "SCSAS")]
    Scsas,
    #[serde(rename = "SCEF")]
    Scef,
    #[serde(rename = "SCP")]
    Scp,
    #[serde(rename = "NSSAAF")]
    Nssaaf,
    #[serde(rename = "ICSCF")]
    Icscf,
    #[serde(rename = "SCSCF")]
    Scscf,
    #[serde(rename = "DRA")]
    Dra,
    #[serde(rename = "IMS_AS")]
    ImsAs,
    #[serde(rename = "AANF")]
    Aanf,
    #[serde(rename = "5G_DDNMF")]
    Variant5GDdnmf,
    #[serde(rename = "NSACF")]
    Nsacf,
    #[serde(rename = "MFAF")]
    Mfaf,
    #[serde(rename = "EASDF")]
    Easdf,
    #[serde(rename = "DCCF")]
    Dccf,
    #[serde(rename = "MB_SMF")]
    MbSmf,
    #[serde(rename = "TSCTSF")]
    Tsctsf,
    #[serde(rename = "ADRF")]
    Adrf,
    #[serde(rename = "GBA_BSF")]
    GbaBsf,
    #[serde(rename = "CEF")]
    Cef,
    #[serde(rename = "MB_UPF")]
    MbUpf,
    #[serde(rename = "NSWOF")]
    Nswof,
    #[serde(rename = "PKMF")]
    Pkmf,
    #[serde(rename = "MNPF")]
    Mnpf,
    #[serde(rename = "SMS_GMSC")]
    SmsGmsc,
    #[serde(rename = "SMS_IWMSC")]
    SmsIwmsc,
    #[serde(rename = "MBSF")]
    Mbsf,
    #[serde(rename = "MBSTF")]
    Mbstf,
    #[serde(rename = "PANF")]
    Panf,

}

impl ToString for NfTypeAnyOf {
    fn to_string(&self) -> String {
        match self {
            Self::Nrf => String::from("NRF"),
            Self::Udm => String::from("UDM"),
            Self::Amf => String::from("AMF"),
            Self::Smf => String::from("SMF"),
            Self::Ausf => String::from("AUSF"),
            Self::Nef => String::from("NEF"),
            Self::Pcf => String::from("PCF"),
            Self::Smsf => String::from("SMSF"),
            Self::Nssf => String::from("NSSF"),
            Self::Udr => String::from("UDR"),
            Self::Lmf => String::from("LMF"),
            Self::Gmlc => String::from("GMLC"),
            Self::Variant5GEir => String::from("5G_EIR"),
            Self::Sepp => String::from("SEPP"),
            Self::Upf => String::from("UPF"),
            Self::N3Iwf => String::from("N3IWF"),
            Self::Af => String::from("AF"),
            Self::Udsf => String::from("UDSF"),
            Self::Bsf => String::from("BSF"),
            Self::Chf => String::from("CHF"),
            Self::Nwdaf => String::from("NWDAF"),
            Self::Pcscf => String::from("PCSCF"),
            Self::Cbcf => String::from("CBCF"),
            Self::Hss => String::from("HSS"),
            Self::Ucmf => String::from("UCMF"),
            Self::SorAf => String::from("SOR_AF"),
            Self::Spaf => String::from("SPAF"),
            Self::Mme => String::from("MME"),
            Self::Scsas => String::from("SCSAS"),
            Self::Scef => String::from("SCEF"),
            Self::Scp => String::from("SCP"),
            Self::Nssaaf => String::from("NSSAAF"),
            Self::Icscf => String::from("ICSCF"),
            Self::Scscf => String::from("SCSCF"),
            Self::Dra => String::from("DRA"),
            Self::ImsAs => String::from("IMS_AS"),
            Self::Aanf => String::from("AANF"),
            Self::Variant5GDdnmf => String::from("5G_DDNMF"),
            Self::Nsacf => String::from("NSACF"),
            Self::Mfaf => String::from("MFAF"),
            Self::Easdf => String::from("EASDF"),
            Self::Dccf => String::from("DCCF"),
            Self::MbSmf => String::from("MB_SMF"),
            Self::Tsctsf => String::from("TSCTSF"),
            Self::Adrf => String::from("ADRF"),
            Self::GbaBsf => String::from("GBA_BSF"),
            Self::Cef => String::from("CEF"),
            Self::MbUpf => String::from("MB_UPF"),
            Self::Nswof => String::from("NSWOF"),
            Self::Pkmf => String::from("PKMF"),
            Self::Mnpf => String::from("MNPF"),
            Self::SmsGmsc => String::from("SMS_GMSC"),
            Self::SmsIwmsc => String::from("SMS_IWMSC"),
            Self::Mbsf => String::from("MBSF"),
            Self::Mbstf => String::from("MBSTF"),
            Self::Panf => String::from("PANF"),
        }
    }
}

impl Default for NfTypeAnyOf {
    fn default() -> NfTypeAnyOf {
        Self::Nrf
    }
}




