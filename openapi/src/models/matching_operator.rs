/*
 * Common Data Types
 *
 * Common Data Types for Service Based Interfaces. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// MatchingOperator : the matching operation.

/// the matching operation.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MatchingOperator {
    #[serde(rename = "FULL_MATCH")]
    FullMatch,
    #[serde(rename = "MATCH_ALL")]
    MatchAll,
    #[serde(rename = "STARTS_WITH")]
    StartsWith,
    #[serde(rename = "NOT_START_WITH")]
    NotStartWith,
    #[serde(rename = "ENDS_WITH")]
    EndsWith,
    #[serde(rename = "NOT_END_WITH")]
    NotEndWith,
    #[serde(rename = "CONTAINS")]
    Contains,
    #[serde(rename = "NOT_CONTAIN")]
    NotContain,

}

impl ToString for MatchingOperator {
    fn to_string(&self) -> String {
        match self {
            Self::FullMatch => String::from("FULL_MATCH"),
            Self::MatchAll => String::from("MATCH_ALL"),
            Self::StartsWith => String::from("STARTS_WITH"),
            Self::NotStartWith => String::from("NOT_START_WITH"),
            Self::EndsWith => String::from("ENDS_WITH"),
            Self::NotEndWith => String::from("NOT_END_WITH"),
            Self::Contains => String::from("CONTAINS"),
            Self::NotContain => String::from("NOT_CONTAIN"),
        }
    }
}

impl Default for MatchingOperator {
    fn default() -> MatchingOperator {
        Self::FullMatch
    }
}




