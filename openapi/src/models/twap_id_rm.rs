/*
 * Common Data Types
 *
 * Common Data Types for Service Based Interfaces. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// TwapIdRm : This data type is defined in the same way as the 'TwapId' data type, but with the OpenAPI 'nullable: true' property. 



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct TwapIdRm {
    /// This IE shall contain the SSID of the access point to which the UE is attached, that is received over NGAP, see IEEE Std 802.11-2012. 
    #[serde(rename = "ssId")]
    pub ss_id: String,
    /// When present, it shall contain the BSSID of the access point to which the UE is attached, for trusted WLAN access, see IEEE Std 802.11-2012. 
    #[serde(rename = "bssId", skip_serializing_if = "Option::is_none")]
    pub bss_id: Option<String>,
    /// string with format 'bytes' as defined in OpenAPI
    #[serde(rename = "civicAddress", skip_serializing_if = "Option::is_none")]
    pub civic_address: Option<String>,
}

impl TwapIdRm {
    /// This data type is defined in the same way as the 'TwapId' data type, but with the OpenAPI 'nullable: true' property. 
    pub fn new(ss_id: String) -> TwapIdRm {
        TwapIdRm {
            ss_id,
            bss_id: None,
            civic_address: None,
        }
    }
}


